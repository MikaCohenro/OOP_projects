mika2021
322523192

1. Clever vs. Whatever:
   For the Clever player, the chosen tactic involves systematically filling the game board row after row.
   The Clever player aims to win against the Whatever player with a 55% success rate. This expected outcome
   is influenced by the observation that as the size of the board increases, there is a decreasing likelihood
   that the Whatever player will successfully block the Clever player.
   Therefore, Clever tends to win more games in the long run.
   Clever vs. Genius:
   In the matchup between Clever and Genius, the strategy is for the Genius player to start by filling
   the second column.
   Regardless of whether Clever or Genius goes first,
   the Genius player ensures that the second column is filled with the required win_streak before
   Clever can fill the first row. This strategic move results in Genius consistently winning against Clever.
   The reasoning behind this is that Clever gets blocked in the second cell of the first row,
   allowing Genius to secure victory by focusing on the second column.
   As a result, Genius tends to emerge as the winner in most encounters with Clever.

2. Inheriting from the Player class offers several advantages, aligning with key principles of OOP.
 The utilization of upcasting for each player type to the common Player class enhances code flexibility,
 allowing instances of different player types to be treated uniformly.
 This approach simplifies the implementation of diverse logic tailored for specific player types at different
 points in the program. Moreover, the design facilitates seamless extensibility,
 enabling the effortless addition of new player types in the future without necessitating extensive
 modifications to the existing codebaseâ€”simply by introducing additional player types in the Tournament class.
   These design choices notably align with the Abstraction principle of OOP, emphasizing the creation of a
   common base class to encapsulate shared features and behaviors, promoting code organization and clarity.